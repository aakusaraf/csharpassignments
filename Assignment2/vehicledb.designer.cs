#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Assignment2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="vehicles")]
	public partial class vehicledbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertcompany(company instance);
    partial void Updatecompany(company instance);
    partial void Deletecompany(company instance);
    partial void Insertmodel(model instance);
    partial void Updatemodel(model instance);
    partial void Deletemodel(model instance);
    #endregion
		
		public vehicledbDataContext() : 
				base(global::Assignment2.Properties.Settings.Default.vehiclesConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public vehicledbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public vehicledbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public vehicledbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public vehicledbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<company> companies
		{
			get
			{
				return this.GetTable<company>();
			}
		}
		
		public System.Data.Linq.Table<model> models
		{
			get
			{
				return this.GetTable<model>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.companies")]
	public partial class company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _company_id;
		
		private string _company_name;
		
		private EntitySet<model> _models;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncompany_idChanging(int value);
    partial void Oncompany_idChanged();
    partial void Oncompany_nameChanging(string value);
    partial void Oncompany_nameChanged();
    #endregion
		
		public company()
		{
			this._models = new EntitySet<model>(new Action<model>(this.attach_models), new Action<model>(this.detach_models));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_company_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int company_id
		{
			get
			{
				return this._company_id;
			}
			set
			{
				if ((this._company_id != value))
				{
					this.Oncompany_idChanging(value);
					this.SendPropertyChanging();
					this._company_id = value;
					this.SendPropertyChanged("company_id");
					this.Oncompany_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_company_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string company_name
		{
			get
			{
				return this._company_name;
			}
			set
			{
				if ((this._company_name != value))
				{
					this.Oncompany_nameChanging(value);
					this.SendPropertyChanging();
					this._company_name = value;
					this.SendPropertyChanged("company_name");
					this.Oncompany_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="company_model", Storage="_models", ThisKey="company_id", OtherKey="company_id")]
		public EntitySet<model> models
		{
			get
			{
				return this._models;
			}
			set
			{
				this._models.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_models(model entity)
		{
			this.SendPropertyChanging();
			entity.company = this;
		}
		
		private void detach_models(model entity)
		{
			this.SendPropertyChanging();
			entity.company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.models")]
	public partial class model : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _model_id;
		
		private string _model_name;
		
		private string _model_type;
		
		private int _company_id;
		
		private EntityRef<company> _company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onmodel_idChanging(int value);
    partial void Onmodel_idChanged();
    partial void Onmodel_nameChanging(string value);
    partial void Onmodel_nameChanged();
    partial void Onmodel_typeChanging(string value);
    partial void Onmodel_typeChanged();
    partial void Oncompany_idChanging(int value);
    partial void Oncompany_idChanged();
    #endregion
		
		public model()
		{
			this._company = default(EntityRef<company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_model_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int model_id
		{
			get
			{
				return this._model_id;
			}
			set
			{
				if ((this._model_id != value))
				{
					this.Onmodel_idChanging(value);
					this.SendPropertyChanging();
					this._model_id = value;
					this.SendPropertyChanged("model_id");
					this.Onmodel_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_model_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string model_name
		{
			get
			{
				return this._model_name;
			}
			set
			{
				if ((this._model_name != value))
				{
					this.Onmodel_nameChanging(value);
					this.SendPropertyChanging();
					this._model_name = value;
					this.SendPropertyChanged("model_name");
					this.Onmodel_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_model_type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string model_type
		{
			get
			{
				return this._model_type;
			}
			set
			{
				if ((this._model_type != value))
				{
					this.Onmodel_typeChanging(value);
					this.SendPropertyChanging();
					this._model_type = value;
					this.SendPropertyChanged("model_type");
					this.Onmodel_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_company_id", DbType="Int NOT NULL")]
		public int company_id
		{
			get
			{
				return this._company_id;
			}
			set
			{
				if ((this._company_id != value))
				{
					if (this._company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncompany_idChanging(value);
					this.SendPropertyChanging();
					this._company_id = value;
					this.SendPropertyChanged("company_id");
					this.Oncompany_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="company_model", Storage="_company", ThisKey="company_id", OtherKey="company_id", IsForeignKey=true)]
		public company company
		{
			get
			{
				return this._company.Entity;
			}
			set
			{
				company previousValue = this._company.Entity;
				if (((previousValue != value) 
							|| (this._company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._company.Entity = null;
						previousValue.models.Remove(this);
					}
					this._company.Entity = value;
					if ((value != null))
					{
						value.models.Add(this);
						this._company_id = value.company_id;
					}
					else
					{
						this._company_id = default(int);
					}
					this.SendPropertyChanged("company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
